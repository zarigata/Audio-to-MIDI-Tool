import pretty_midi
import json
from pathlib import Path

TOOL_VERSION = "audio2midi_gui v1.0"

def write_midi_from_notes(notes, out_path, tempo=None, program=0, separate=False):
    """
    Write MIDI from notes list.

    Args:
        notes: list of dicts {onset_s, offset_s, pitch_midi, velocity, track_name}
        out_path: output path (for multi-track) or dir (for separate)
        tempo: BPM
        program: GM program
        separate: if True, write separate MIDI per track_name
    """
    if tempo is None:
        tempo = 120

    if separate:
        # Group by track_name
        tracks = {}
        for note in notes:
            track = note['track_name']
            if track not in tracks:
                tracks[track] = []
            tracks[track].append(note)

        out_dir = Path(out_path)
        out_dir.mkdir(exist_ok=True)
        for track_name, track_notes in tracks.items():
            midi_path = out_dir / f"{track_name}.mid"
            _write_single_track(track_notes, midi_path, tempo, program, track_name)
    else:
        _write_single_track(notes, out_path, tempo, program, "Multi-track")

def _write_single_track(notes, out_path, tempo, program, track_name):
    midi = pretty_midi.PrettyMIDI(initial_tempo=tempo)
    instrument = pretty_midi.Instrument(program=program, name=track_name)

    for note in notes:
        pm_note = pretty_midi.Note(
            velocity=int(note['velocity'] * 127) if isinstance(note['velocity'], float) else note['velocity'],
            pitch=note['pitch_midi'],
            start=note['onset_s'],
            end=note['offset_s']
        )
        instrument.notes.append(pm_note)

    # Add metadata
    midi.lyrics = [pretty_midi.Lyric(text=f"Generated by {TOOL_VERSION}", time=0)]
    midi.text_events.append(pretty_midi.Text(text=f"Track: {track_name}", time=0))

    midi.instruments.append(instrument)
    midi.write(out_path)
